{"version":3,"sources":["components/Data.js","components/Navbar.js","components/Home.js","components/View.js","components/TopHeadlines.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","newsList","setNews","name","code","selected_country","setCountry","selected_category","setCategory","Provider","value","api_host","api_key","countries","categories","news_list","children","Navbar","domain_path","React","useContext","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","countries_list","map","country","index","key","aria-hidden","Home","View","news","TopHeadlines","path_country_name","path_country_code","useParams","country_id","console","log","useEffect","a","api_url","fetch","response","json","data","articles","getData","src","urlToImage","alt","source","title","App","window","location","hostname","path","exact","component","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba7b8aca.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport countries_list from \"./CountriesList.json\";\r\n\r\nexport const DataContext = createContext();\r\nexport const DataProvider = (props) => {\r\n  const api_host = \"http://newsapi.org/v2\";\r\n  const api_key = \"0b1aa3a797ef4fa48ea7bf7e7bb59690\";\r\n  const [newsList, setNews] = useState([]);\r\n  const [selected_country, setCountry] = useState({\r\n    name: \"India\",\r\n    code: \"in\",\r\n  });\r\n  const [selected_category, setCategory] = useState(\"business\");\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        api_host: api_host,\r\n        api_key: api_key,\r\n        countries: [selected_country, setCountry],\r\n        categories: [selected_category, setCategory],\r\n        news_list: [newsList, setNews],\r\n      }}\r\n    >\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { DataContext } from \"./Data\";\r\nimport countries_list from \"./CountriesList.json\";\r\n\r\nfunction Navbar({domain_path}) {\r\n  const { countries, categories } = React.useContext(DataContext);\r\n  const [selected_country, setCountry] = countries;\r\n  const [selected_category, setCategory] = categories;\r\n  return (\r\n    <header>\r\n      <div className=\"container\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n          <a className=\"navbar-brand\" href={domain_path}>\r\n            Home\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className=\"nav-link\"\r\n                  href={`${domain_path}top-headlines/${selected_country.code}`}\r\n                >\r\n                  Top Headlines\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  href=\"#\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Select Country\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  {countries_list.map((country, index) => (\r\n                    <div key={index}>\r\n                      <a\r\n                        className=\"dropdown-item\"\r\n                        href={`${domain_path}top-headlines/${country.code}`}\r\n                      >\r\n                        {country.name}\r\n                      </a>\r\n                      <div className=\"dropdown-divider\"></div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <div className=\"d-inline-flex my-2 my-lg-0\">\r\n              <a href=\"#\">\r\n                <i className=\"fa fa-cog\" aria-hidden=\"true\"></i>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <div className=\"home-bnr\"></div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst View = ({ news }) => {\r\n  return <div className=\"card\"></div>;\r\n};\r\n\r\nexport default View;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { DataContext } from \"./Data\";\r\nimport countries_list from \"./CountriesList.json\";\r\n\r\nfunction TopHeadlines() {\r\n  const {\r\n    api_host,\r\n    api_key,\r\n    countries,\r\n    categories,\r\n    news_list,\r\n  } = React.useContext(DataContext);\r\n  const [selected_country, setCountry] = countries;\r\n  const [selected_category, setCategory] = categories;\r\n  const [newsList, setNews] = news_list;\r\n  var path_country_name = selected_country.name;\r\n//var path_country_code = window.location.pathname.split(\"/\");\r\n  let slug = useParams();\r\n  var path_country_code = slug.country_id;\r\n  console.log(path_country_code);\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const api_url = `${api_host}/top-headlines?country=${path_country_code}&apiKey=${api_key}`;\r\n      const response = await fetch(api_url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setNews(data.articles);\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  countries_list.map((country) => {\r\n    if (country.code == path_country_code[2]) {\r\n      path_country_name = country.name;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"headlines_title\">\r\n          Top Headlines from {path_country_name}\r\n        </div>\r\n        {\r\n          <div className=\"headlines row\">\r\n            {newsList.map((news, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"hd-col col-lg-3 col-md-3 col-sm-6 col-xs-12\"\r\n              >\r\n                <div className=\"hd-card card\">\r\n                  <img src={news.urlToImage} alt={news.source} />\r\n                  <div className=\"card-body\">\r\n                    <a href=\"#\" className=\"card-title\">\r\n                      {news.title}\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TopHeadlines;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport View from \"./components/View\";\nimport { DataProvider } from \"./components/Data\";\nimport TopHeadlines from \"./components/TopHeadlines\";\n\nfunction App() {\n  var domain_path = \"/news-api-app/\";\n  if (window.location.hostname == \"prawinkanna.github.io\") {\n   // domain_path = \"/myapp/projects/news-api-app/\";\n  }\n  return (\n    <DataProvider>\n      <Router>\n        <Navbar domain_path={domain_path} />\n        <Switch>\n          <Route path={`${domain_path}`} exact component={Home}></Route>\n          <Route\n            path={`${domain_path}index.html`}\n            exact\n            component={Home}\n          ></Route>\n          <Route\n            path={`${domain_path}top-headlines/:country_id`}\n            exact\n            component={TopHeadlines}\n          ></Route>\n          <Route\n            path={`${domain_path}view/:catId`}\n            exact\n            component={View}\n          ></Route>\n          <Route>\n            <h1 className=\"my-5 mx-5\">page not found</h1>\n          </Route>\n        </Switch>\n      </Router>\n    </DataProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}